@inherits LinkWidgetComponent
@* Maybe we can use markers? *@

<g class="link"
   @onmousedown="OnMouseDown"
   @onmousedown:stopPropagation>
    @switch (Link.Type)
    {
        case Core.Models.LinkType.Line:
            <line x1="@MiddleSourceX.ToInvariantString()"
                  y1="@MiddleSourceY.ToInvariantString()"
                  x2="@GetTargetX()"
                  y2="@GetTargetY()"
                  stroke="@(Link.Selected ? "rgb(110, 159, 212)" : "black")"
                  stroke-width="4" />
            break;
        case Core.Models.LinkType.Curved:
            <path d="@GenerateCurvedPath()"
                  stroke-width="3"
                  fill="none"
                  stroke="@(Link.Selected ? "rgb(110, 159, 212)" : "black")" />
            break;
        case Core.Models.LinkType.LineWithArrowToTarget:
            <g>
                <line x1="@MiddleSourceX.ToInvariantString()"
                      y1="@MiddleSourceY.ToInvariantString()"
                      x2="@GetTargetX()"
                      y2="@GetTargetY()"
                      stroke="@(Link.Selected ? "rgb(110, 159, 212)" : "black")"
                      stroke-width="4" />
            </g>
            <g transform="translate(@GetTargetX(), @GetTargetY())">
                <g style="transform: rotate(@(CalculateAngleForTargetArrow())deg);">
                    <g transform="translate(0, -4)">
                        <polygon points="0,10 8,30 -8,30"
                                 fill="@(Link.Selected ? "rgb(110, 159, 212)" : "black")"></polygon>
                    </g>
                </g>
            </g>
            break;
    }
</g>

@code {

}