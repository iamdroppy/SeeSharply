@if (Expandable && ChildContent?.Target != null)
{
    <li class="fancytree-lastsib">
        <span @onclick="SelectNodeAsync" 
               class="fancytree-node @(Selected ? "fancytree-active" : "") @GetCssForNode() fancytree-has-children fancytree-lastsib fancytree-exp-el fancytree-ico-e" aria-labelledby="ftal_id4">
            <span role="button" @onclick="ToggleExpanded" class="fancytree-expander fa @ButtonIcon"></span>
            <span role="img" class="fancytree-icon fa fa-file-o fa-lg"></span>
            <span role="treeitem" class="fancytree-title" id="ftal_id4" aria-expanded="@Expanded" aria-selected="false">@Text</span>
        </span>
        <ul role="group" style="@DisplayNoneHelper">
            @ChildContent
        </ul>
    </li>
}
else
{
    <li class="">
        <span @onclick="SelectNodeAsync" class="fancytree-node @(Selected ? "fancytree-active" : "") @GetCssForNode() fancytree-exp-n fancytree-ico-c" aria-labelledby="ftal_id1">
            <span role="button" class="fancytree-expander "></span><span role="img" class="fancytree-icon fa fa-file-o fa-lg"></span>
            <span role="treeitem" class="fancytree-title" id="ftal_id1" aria-selected="false">@Text</span>
        </span>
    </li>
}
@code
{
    [CascadingParameter] public TreeView TreeView { get; set; }
    [Parameter] public object Value { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public string Text { get; set; }
    [Parameter] public bool Expandable { get; set; }
    [Parameter] public bool Expanded { get; set; }

    public bool Selected => TreeView.SelectedItem == this;

    private string ButtonIcon => Expanded ? TreeView.IconOpen : TreeView.IconClosed;

    /// <inheritdoc />
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
    }

    private string GetCssForNode()
    {
        StringBuilder stringBuilder = new StringBuilder();
        if (Expanded)
        {
            stringBuilder.Append("fancytree-expanded ");
        }

        return stringBuilder.ToString();
    }

    private async Task SelectNodeAsync()
    {
        await TreeView.SelectItemAsync(this);
        StateHasChanged();
    }

    private string DisplayNoneHelper => Expanded ? "" : "display: none;";
    private string SelectedHelper => Selected ? "fancytree-active" : "";

    public void ToggleExpanded() => Expanded = !Expanded;

    public void UnselectCallback()
    {
        StateHasChanged();
    }
}