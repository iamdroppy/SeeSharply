@page "/ldstrlookup"
@using System.Text
@using Mono.Cecil.Cil

<input type="checkbox" @bind="_showTypeAndMethod" /> Show Type and Method
<br />
<TableView TData="LdStrMethodInstruction" Data="LdStrInstructions">
    <TableHead>
        <th>Old String</th>
        <th>New String</th>
        @if (_showTypeAndMethod)
        {
        <th>Type</th>
        <th>Method</th>
        }
        <th>Options</th>
    </TableHead>
    <TableRow Context="_ctx">
        <tr style="@_ctx.StateStyle">
            @if (_ctx.IsNull) // will this actually be hit????
            {
            <td style="color: red">NULL</td>
            }
            else
            {
            <td style="width: 20%">@_ctx.GetOperand()</td>
            }
            <td><input type="text" style="width: 100%;" @onchange="_ctx.ValueChanged" /></td>
            @if (_showTypeAndMethod)
            {
            <td style="overflow: scroll; width: 5%">@_ctx.MethodDefinition.DeclaringType.ToString()</td>
            <td>@_ctx.MethodDefinition.ToString()</td>
            }
            <td>
                @if (_ctx.IsDirty)
                {
                <button class="btn btn-success" @onclick="_ctx.Save">Save</button>
                <button class="btn btn-danger" @onclick="@_ctx.Revert">Revert</button>
                }
            </td>
        </tr>
    </TableRow>
</TableView>

@code {
    private bool _showTypeAndMethod { get; set; }
    private LdStrMethodInstruction _ctx; // quickfix for blazor crap
    private LdStrMethodInstruction _lastCtx; // quickfix for blazor crap

    [CascadingParameter] public IAssemblyData AssemblyData { get; set; }

    private IEnumerable<LdStrMethodInstruction> LdStrInstructions { get; set; }

    private class LdStrMethodInstruction
    {
        public MethodDefinition MethodDefinition { get; }
        public Instruction Instruction { get; }
        public string Value { get; private set; }
        public bool IsDirty { get; private set;  }

        public string StateStyle
        {
            get
            {
                if (IsDirty) return "background-color: gray;";
                return string.Empty;
            }
        }

        public bool IsNull { get; private set; }
        public LdStrMethodInstruction(MethodDefinition methodDefinition, Instruction instruction)
        {
            MethodDefinition = methodDefinition;
            Instruction = instruction;
            Value = GetOperand();
        }

        public void ValueChanged(ChangeEventArgs changeEventArgs)
        {
            if (changeEventArgs?.Value is string newString)
            {
                if (Value is { } oldString)
                {
                    if (!newString.Equals(oldString))
                    {
                        IsNull = false;
                        Value = newString;
                        IsDirty = true;
                    }
                }
            }
        }

        public string GetOperand()
        {
            if (Instruction?.Operand is string x)
            {
                return x;
            }
            IsNull = true;
            return null;
        }

        public void Save(MouseEventArgs obj)
        {
            Instruction.Operand = Value;
            IsDirty = false;
        }

        public void Revert()
        {
            Value = GetOperand();
            IsDirty = false;
        }
    }

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();

        List<LdStrMethodInstruction> ldStrInstructions = new List<LdStrMethodInstruction>();

        foreach (var module in AssemblyData.AssemblyDefinition.Modules)
        {
            foreach (var type in module.Types)
            {
                foreach (var method in type.Methods)
                {
                    if (method.Body?.Instructions == null) continue;
                    foreach (var v in method.Body?.Instructions)
                    {
                        if (v.OpCode == OpCodes.Ldstr)
                        {
                            ldStrInstructions.Add(new LdStrMethodInstruction(method, v));
                        }
                    }
                }
            }
        }
        LdStrInstructions = ldStrInstructions;
    }

}